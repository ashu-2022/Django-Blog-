ctrl+C ---> Exit (from program)

1. workon test       --- Enter in virtual environment[ where django installed ]
2. django-admin startproject IBlogger
3. python manage.py runserver
4. python manage.py startapp blog

create 'urls.py' under blog folder

create 'templates' folder under blog app

create a subfolder 'blog' under 'templates' folder

{blog -> templates -> blog -> templates.html}


create 'static' folder under blog app

create a subfolder 'blog' under 'static' folder

{blog -> static -> blog -> static.css}

python manage.py makemigrations 
python manage.py migrate
python manage.py createsuperuser

Username :Ashu
Email : ashutoshpandit308@gmail.com
Password : jss@2022

After this any changes made in database or create new
database in backend
then firsts migrate databases by 

python manage.py makemigrations
python manage.py migrate

To see sql command in terminal. Run below command in terminal.
python manage.py sqlmigrate blog 0001

Run Python shell in terminal by --> python manage.py shell
>>>from blog.models import Post
>>>from django.contrib.auth.models import User
>>>User.objects.all()
----return QuerySet list of users
>>>User.objects.first()
----retun QuerySet name of user
>>>User.objects.filter(username='Ashu')
----retun QuerySet name of users
>>>User.objects.filter(username='Ashu').first()
----retun QuerySet name of user
>>>user = User.objects.filter(username='Ashu').first()
>>>user
----retun name of user

{now we can access all attribute of user using . operator}
>>>user.id
---- return id of user
>>>user.pk
---- return primary_key(which is same id) of user
>>>user=User.objects.get(id=1)
>>>user
----return name of user

>>>Post.objects.all()
---- return empty QuerySet (bcz no post till created)
>>>post_1 = Post(title = 'Blog 1',content='First Post Content!',author=user)
>>>post_1.save()
>>>Post.objects.all()
---- return QuerySet of posts (containing 1 object)
>>>exit()

add below dunder method to change title of Post under Post class of models.py of blog app

    def __str__(self):
        return self.title

Now return python shell

python manage.py shell
>>>from blog.models import Post
>>>from django.contrib.auth.models import User
>>>Post.objects.all()
---- return QuerySet of 1 Blog title    (change defination in model.py by str function)
>>>user=User.objects.filter(username='Ashu').first()
>>>user
---- return user 
>>>post_2=Post(title='Blog 2',content ='Second Post Content',author_id=user.id)
>>>post_2.save()
>>>Post.objects.all()
---- return QuerySet of Blogs( all 2 created till now)
>>>post = Post.objects.first()
>>>post.content
---- retun content of first post
>>>post.date_posted
---- return date & time of post created
>>>post.author
---- return author of post
>>>post.author.email
---- return email of author or post
>>>user.post_set
---- return details of posts created by user
>>>user.post_set.all()
---- return QuerySet of all posts created by user
>>>user.post_set.create(title='Blog 3',content='Third Post Content!')
---- return Post 3 details
>>>Post.objects.all()
---- return details of all 3 posts created till now
>>>exit()





python manage.py startapp users
 
register in setting.py of project under installed apps list :

'users.apps.UsersConfig',

pip install django-crispy-forms    --->for bootstrap form

register in setting.py of project under installed apps :
     'crispy_forms',



Regiser User Details :
u/n : Sahil
email : sahil@gmail.com
p/w : jss@2022


u/n : Mohit
email : mohit@gmail.com
p/w : jss@2022

u/n : Ankit
email : ankit@gmail.com
p/w : jss@2022

u/n : Sumit
email : sumit@gmail.com
p/w : jss@2022


SQL query for profile pic :
write in terminal :----

python manage.py shell
>>>from django.contrib.auth.models import User
>>>user =User.objects.filter(username='Ashu').first()
>>>user
---- return detail of user
>>>user.profile
---- return profile detail of user
>>>user.profile.image
---- return url for user profile pic
>>>user.profile.image.width
---- return width of profile image
>>>user.profile.image.url
---- return url of image of user
exit()




Adding post in a single go using json files 
Type in terminal:

python manage.py shell
>>>import json
>>>from blog.models import Post
>>>with open('posts.json') as f:
...     posts_json=json.load(f)
...
>>>for post in posts_json:
...    post=Post(title=post['title'],content=post['content'],
author_id=post['user_id'])
...         
... 
>>>exit()



For pagination (divide all posts in pages )
write following command in terminal :

python manage.py shell
>>>from django.core.paginator import django.core.paginator
>>>posts = ['1','2','3','4','5']
>>>p=Paginator(posts,2)
>>>p.num_pages
3
>>>for page in p.page_range:
...    print(page)
... 
1
2
3
>>>p1=p.page(1)
>>>p1
<Page 1 of 3>
>>>p1.number
1
>>>p1.object_list
['1','2']
>>>p1.has_previous()
False
>>>p1.has_next()
True
>>>p1.next_page_number()
2
>>>exit()


password reset procedure:-----


https://myblognotes.herokuapp.com/ | https://git.heroku.com/myblognotes.git

heroku open --app myblognotes

heroku git:remote -a myblognotes

git push heroku master

// add in setting.py files:
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

create Procfile in main root directory

to generate secret key for production using python

python
import secrets
secrets.token_hex(24)

e.g., -> '4686cacc33fd4313a3e943c8f794486d55749065a76fc6aa'

heroku config:set SECRET_KEY="3hgmuvghy@w+h9vn_7j8^8in9qu55=mp30t=k#pa2m2vkrhb0n"

heroku config:set DEBUG_VALUE="True"


